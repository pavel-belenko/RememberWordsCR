@page "/user"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using NetSchool.Web.Entities.User
@using NetSchool.Web.Pages.Account.Services
@using NetSchool.Web.Providers
@inject NavigationManager NavManager
@inject IAccountService accountService
@inject ISnackbar Snackbar
@attribute [Authorize]
@layout MainLayout

@if (user == null)
{
    <MudText>Loading</MudText>
}
else
{
    <MudCard Style="padding-left:10vh;padding-right:10vh;padding-top:10vh;padding-bottom:10vh;">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="6" md="5">
                    <MudText Typo="Typo.h5">User Profile</MudText>
                </MudItem>
            </MudGrid>
            <MudDivider Margin="Margin.Top" />

            <MudGrid>
                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle1" Margin="Margin.Top">Name:</MudText>
                    <MudText Typo="Typo.subtitle1" Margin="Margin.Top">Card collections:</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle1" Margin="Margin.Top">@user.UserName</MudText>
                        @foreach (var collection in user.CardCollections)
                    {
                        <div>
                            <MudLink OnClick="()=>OpenCollection(collection.Id)">@collection.Name</MudLink>
                        </div>
                    }
                </MudItem>
            </MudGrid>

            @if (Subscribed)
            {
                <MudButton Disabled="SubscribeButtonDisabled" OnClick="Unsubscribe">Unsubscribe</MudButton>
            }
            else
            {
                <MudButton Disabled="SubscribeButtonDisabled" OnClick="Subscribe">Subscribe</MudButton>
            }
        </MudCardContent>
    </MudCard>
}


@code {
    [SupplyParameterFromQuery] private string userId { get; set; }
    private UserAccountModel user { get; set; }
    private bool Subscribed { get; set; }
    private bool SubscribeButtonDisabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                NavManager.NavigateTo("/");
                return;
            }

            user = await accountService.GetAsync(new Guid(userId));
            var watcherId = new Guid(await accountService.GetUserIdAsync()); // person who opened this profile

            if (user.Id == watcherId)
            {
                NavManager.NavigateTo("/profile");
            }

            Subscribed = user.Followers.Any(x => x.Id == watcherId);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Subscribe()
    {
        try
        {
            SubscribeButtonDisabled = true;
            await accountService.SubscribeAsync(new Guid(userId));
            Subscribed = true;
            SubscribeButtonDisabled = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Unsubscribe()
    {
        try
        {
            SubscribeButtonDisabled = true;
            await accountService.UnsubscribeAsync(new Guid(userId));
            Subscribed = false;
            SubscribeButtonDisabled = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OpenCollection(Guid collectionId)
    {
        NavManager.NavigateTo($"/show-collection?collectionId={collectionId}");
    }
}