@page "/change-password"
@using NetSchool.Web.Components
@using NetSchool.Web.Pages.Account.Models
@using NetSchool.Web.Pages.Account.Services

@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Change password</MudText>

                <MudTextField @bind-Value="model.NewPassword" For="@(() => model.NewPassword)"
                              Label="Password"
                              HelperText="Input new password"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              Required="true"
                              RequiredError="Password is required!"
                              OnAdornmentClick="TogglePasswordVisibility" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit">Change password</MudButton>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private ChangePasswordModel model { get; set; } = new();
    [SupplyParameterFromQuery] private string userEmail { get; set; }
    [SupplyParameterFromQuery] private string code { get; set; }

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        model.Email = userEmail;
        model.Code = code;

        try
        {
            await AccountService.ChangePasswordAsync(model);

            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Your password was changed");
            parameters.Add("ButtonText", "Ok");
            parameters.Add("Color", Color.Error);
            parameters.Add("ShowCancelButton", false);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Change password", parameters, options);
            var result = await dialog.Result;

            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
