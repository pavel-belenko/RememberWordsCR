@page "/create-collection"
@page "/update-collection"
@using Microsoft.AspNetCore.Components.Authorization
@using NetSchool.Web.Components
@using Microsoft.AspNetCore.Authorization
@using NetSchool.Web.Entities.CardCollections
@using NetSchool.Web.Services.CardCollections
@using System.Security.Claims
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICardCollectionsService cardService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authProvider

@attribute [Authorize]
@layout MainLayout

<PageTitle>Create card collection</PageTitle>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SaveCollection" Disabled="@(!collection.Cards.Any())">Save</MudButton>

<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudPaper>
                <MudForm Model="collection" @ref="form">
                    <MudTextField Label="Collection name" @bind-Value="collection.Name"
                                  For="@(() => collection.Name)"
                                  Required="true"
                                  RequiredError="Collection name is required!"
                                  MaxLength="100">
                    </MudTextField>
                    @foreach (var (component, index) in collection.Cards.Select((c, i) => (c, i)))
                    {
                        <MudCard>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="10">
                                        <MudTextField Value="@component.Front" Label="Term" Variant="Variant.Filled" Style="width: 100%" />
                                        <MudTextField Value="@component.Reverse" Label="Definition" Variant="Variant.Filled" Style="width: 100%" />
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="(()=>EditCard(index))">Edit</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="(()=>DeleteCard(index))">Delete</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                        @if (index != collection.Cards.Count - 1)
                        {
                            <div style="height: 20px;"></div>
                        }
                    }
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddCard">Add card</MudButton>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    const string CreatePath = "create-collection";
    private CardCollectionModel collection;
    private UpdateModel updateModel;
    private string searchString = string.Empty;
    private MudForm form = default!;
    [SupplyParameterFromQuery] public Guid collectionId { get; set; }

    protected override void OnInitialized()
    {
        var path = NavManager.ToBaseRelativePath(NavManager.Uri);
        collection = new CardCollectionModel();
        collection.Cards = new List<CardModel>();

        updateModel = new UpdateModel();
        updateModel.UpdatedCards = new List<CardModel>();
        updateModel.DeletedCardsId = new List<Guid>();
    }

    protected override async Task OnInitializedAsync()
    {
        if (CreatePath == NavManager.ToBaseRelativePath(NavManager.Uri))
            return;

        var collectionModel = await cardService.Get(collectionId);

        if (collectionModel == null)
            return;

        collection.Name = collectionModel.Name;
        collection.UserId = collectionModel.UserId;
        collection.Cards = collectionModel.Cards;
    }

    private async Task AddCard()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<CardDialog>("Add card", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var cardModel = ((CardDialog)dialog.Dialog).Model;
        cardModel.Id = Guid.NewGuid();

        collection.Cards.Add(cardModel);

        if (CreatePath == NavManager.ToBaseRelativePath(NavManager.Uri))
            return;

        //update endpoint

        updateModel.UpdatedCards.Add(cardModel);
    }

    private async Task EditCard(int index)
    {
        var parameters = new DialogParameters();
        parameters.Add("Model", new CardModel { Id = collection.Cards[index].Id, Front = collection.Cards[index].Front, Reverse = collection.Cards[index].Reverse });

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<CardDialog>("Edit card", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var cardModel = ((CardDialog)dialog.Dialog).Model;

        collection.Cards[index] = cardModel;

        if (CreatePath == NavManager.ToBaseRelativePath(NavManager.Uri))
            return;

        //update endpoint

        var existCard = updateModel.UpdatedCards.FirstOrDefault(x => x.Id == cardModel.Id);
        if (existCard == null) // changing an existing card
        {
            updateModel.UpdatedCards.Add(cardModel);
        }
        else // changing the created card
        {
            existCard.Front = cardModel.Front;
            existCard.Reverse = cardModel.Reverse;
        }
    }

    private async Task DeleteCard(int index)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this card? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete collection", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var DeletedCardId = collection.Cards[index].Id;
        collection.Cards.RemoveAt(index);

        if (CreatePath == NavManager.ToBaseRelativePath(NavManager.Uri))
            return;

        //update endpoint

        var cardToDelete = updateModel.UpdatedCards.FirstOrDefault(x => x.Id == DeletedCardId);

        if (cardToDelete != null)
        {
            updateModel.UpdatedCards.Remove(cardToDelete);
        }

        updateModel.DeletedCardsId.Add(DeletedCardId);
    }

    private async Task SaveCollection()
    {
        try
        {
            await form.Validate();
            if (!form.IsValid)
                return;

            updateModel.Name = collection.Name;
            if (CreatePath == NavManager.ToBaseRelativePath(NavManager.Uri))
            {
                var authState = await authProvider.GetAuthenticationStateAsync();
                var userId = authState.User.Claims.FirstOrDefault(x => x.Type.ToLower() == "sub").Value;
                var createdCollection = new CreateModel
                    {
                        Name = collection.Name,
                        UserId = new Guid(userId),//new Guid("b26fd4c9-3638-4a8a-9f67-4051f11c4278"),
                        Cards = collection.Cards.Select(x => new CreateCardModel { Front = x.Front, Reverse = x.Reverse }).ToList()
                    };

                await cardService.Create(createdCollection);
            }
            else
            {
                await cardService.Update(collectionId, updateModel);
            }

            NavManager.NavigateTo("/collections");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}